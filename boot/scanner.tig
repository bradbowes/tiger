use "sources.tig"
use "symbols.tig"

type token_tag = err_token
               | and_token
               | array_token
               | assign_token
               | begin_token
               | case_token
               | char_token
               | colon_token
               | comma_token
               | comment_token
               | div_token
               | do_token
               | dot_token
               | else_token
               | end_token
               | eof_token
               | eq_token
               | for_token
               | geq_token
               | gt_token
               | id_token
               | if_token
               | in_token
               | lbrace_token
               | lbracket_token
               | leq_token
               | let_token
               | lparen_token
               | lt_token
               | minus_token
               | mod_token
               | mul_token
               | neq_token
               | nil_token
               | number_token
               | of_token
               | or_token
               | pipe_token
               | plus_token
               | rbrace_token
               | rbracket_token
               | rparen_token
               | semicolon_token
               | string_token
               | then_token
               | to_token
               | type_token
               | use_token
               | while_token

type token = {
   tag: token_tag,
   value: symbol,
   file_name: string,
   line: int,
   col: int
}

tok = token { tag = err_token, value = nil, file_name = "", line = 0, col = 0 }
buf = make_buffer(4096)

and_kw = intern_string("and")
array_kw = intern_string("array")
begin_kw = intern_string("begin")
case_kw = intern_string("case")
do_kw = intern_string("do")
else_kw = intern_string("else")
end_kw = intern_string("end")
for_kw = intern_string("for")
if_kw = intern_string("if")
in_kw = intern_string("in")
let_kw = intern_string("let")
mod_kw = intern_string("mod")
nil_kw = intern_string("nil")
of_kw = intern_string("of")
or_kw = intern_string("or")
then_kw = intern_string("then")
type_kw = intern_string("type")
use_kw = intern_string("use")
while_kw = intern_string("while")

push_buf() =
   begin
      push_buffer(buf, ch)
      nextch()
   end

tok_location(): location =
   location {
      file_name = tok.file_name,
      line = tok.line,
      col = tok.col
   }

skip_spaces() =
   while is_space(ch) do
      nextch();

recognize(tag: token_tag) =
   begin
      tok.tag := tag
      tok.value := intern(buf)
   end

push_tag(tag: token_tag) =
   begin
      push_buf()
      recognize(tag)
   end

scan_comment() =
   begin
      push_buf()
      while buf.ptr < 4 or ch <> #")" do
         begin
            while ch <> #"*" do
               push_buf()
            while ch = #"*" do
               push_buf()
         end
      push_buf()
      recognize(comment_token)
   end

scan_string() =
   let
      escape = chr(0)
      code = 0
   in
      nextch()
      while ch <> #"\"" do
         if ch = #"\\" then
            let
               esc = true
            in
               nextch();
               if ch = #"a" then escape := #"\a"       (* alert *)
               else if ch = #"b" then escape := #"\b"  (* backspace *)
               else if ch = #"t" then escape := #"\t"  (* tab *)
               else if ch = #"n" then escape := #"\n"  (* newline *)
               else if ch = #"v" then escape := #"\v"  (* vertical tab *)
               else if ch = #"f" then escape := #"\f"  (* form feed *)
               else if ch = #"r" then escape := #"\r"  (* carriage return *)
               else if ch = #"\\" or ch = #"\"" then escape := ch
               else if ch = #"^" then
                  begin
                     nextch()
                     if is_upper(ch) then
                        escape := chr(ord(ch) - 64)
                     else if is_lower(ch) then
                        escape := chr(ord(ch) - 96)
                     else
                        err("illegal escape sequence", src_location())
                  end
               else if is_digit(ch) then
                  begin
                     code := ord(ch) - ord(#"0")
                     nextch()
                     if is_digit(ch) then
                        code := code * 10 + ord(ch) - ord(#"0")
                     else
                        err("illegal escape sequence", src_location())
                     nextch();
                     if is_digit(ch) then
                        code := code * 10 + ord(ch) - ord(#"0")
                     else
                        err("illegal escape sequence", src_location())
                     if code > 255 then
                        err("illegal escape sequence", src_location())
                     escape := chr(code);
                  end
               else if is_space(ch) then
                  begin
                     skip_spaces()
                     if ch = #"\\" then
                        nextch()
                     else
                        err("illegal escape sequence", src_location())
                     esc := false
                  end
               else
                  err("illegal escape sequence", src_location())
               if esc then
                  begin
                     push_buffer(buf, escape)
                     nextch()
                  end
            end
         else
            push_buf()
      recognize(string_token)
      nextch()
   end

scan_char() =
   begin
      nextch()
      if ch = #"\"" then
         scan_string()
      else
         err("illegal character literal", src_location())
      if length(tok.value.id) <> 1 then
         err("illegal character literal", tok_location())
      recognize(char_token)
   end;

scan_number() =
   begin
      while is_digit(ch) do
         push_buf();
      recognize(number_token)
   end;

scan_id() =
   begin
      while is_alpha(ch) or is_digit(ch) or ch = #"_" do
         push_buf();
      recognize(id_token)
      let
         value = tok.value
      in
         tok.tag := if value = and_kw then and_token
            else if value = array_kw then array_token
            else if value = begin_kw then begin_token
            else if value = case_kw then case_token
            else if value = do_kw then do_token
            else if value = else_kw then else_token
            else if value = end_kw then end_token
            else if value = for_kw then for_token
            else if value = if_kw then if_token
            else if value = in_kw then in_token
            else if value = let_kw then let_token
            else if value = mod_kw then mod_token
            else if value = nil_kw then nil_token
            else if value = of_kw then of_token
            else if value = or_kw then or_token
            else if value = then_kw then then_token
            else if value = type_kw then type_token
            else if value = use_kw then use_token
            else if value = while_kw then while_token
            else id_token
      end
   end

scan() =
   begin
      skip_spaces()
      clear_buffer(buf)
      tok.value := nil
      tok.file_name := src.file_name
      tok.line := src.line
      tok.col := src.col
      if ch = EOF then recognize(eof_token)
      else if ch = #"," then push_tag(comma_token)
      else if ch = #";" then push_tag(semicolon_token)
      else if ch = #"." then push_tag(dot_token)
      else if ch = #"(" then
         begin
            push_buf()
            if ch = #"*" then scan_comment()
            else recognize(lparen_token)
         end
      else if ch = #")" then push_tag(rparen_token)
      else if ch = #"[" then push_tag(lbracket_token)
      else if ch = #"]" then push_tag(rbracket_token)
      else if ch = #"{" then push_tag(lbrace_token)
      else if ch = #"}" then push_tag(rbrace_token)
      else if ch = #"|" then push_tag(pipe_token)
      else if ch = #"+" then push_tag(plus_token)
      else if ch = #"-" then push_tag(minus_token)
      else if ch = #"*" then push_tag(mul_token)
      else if ch = #"/" then push_tag(div_token)
      else if ch = #"=" then push_tag(eq_token)
      else if ch = #"<" then
         begin
            push_buf()
            if ch = #">" then push_tag(neq_token)
            else if ch = #"=" then push_tag(leq_token)
            else recognize(lt_token)
         end
      else if ch = #">" then
         begin
            push_buf()
            if ch = #"=" then push_tag(geq_token)
            else recognize(gt_token)
         end
      else if ch = #":" then
         begin
            push_buf()
            if ch = #"=" then push_tag(assign_token)
            else recognize(colon_token)
         end
      else if is_digit(ch) then scan_number()
      else if ch = #"\"" then scan_string()
      else if ch = #"#" then scan_char()
      else if is_alpha(ch) then  scan_id()
      else err("Illegal character", src_location())
   end
