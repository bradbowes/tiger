type location = {
   file_name: string,
   line: int,
   col: int
}

type source = {
   file_name: string,
   open: bool,
   src: file,
   line: int,
   col: int,
   resume: source
}

src: source = nil
ch = chr(0)

src_location(): location =
   if src = nil then
      nil
   else
      location {
         file_name = src.file_name,
         line = src.line,
         col = src.col
      }

err(msg: string, loc: location) =
   begin
      file_write("Error: ", STD_ERROR)
      if loc <> nil then
         begin
            file_write("in ", STD_ERROR)
            file_write(loc.file_name, STD_ERROR)
            file_write(", line ", STD_ERROR)
            file_write(str(loc.line), STD_ERROR)
            file_write(", column ", STD_ERROR)
            file_write(str(loc.col), STD_ERROR)
            file_write(": ", STD_ERROR)
         end
      file_writeln(msg, STD_ERROR)
      halt(1)
   end

nextch() =
   if src <> nil and src.open then
      begin
         ch := file_getchar(src.src)
         if ch = EOF then
            begin
               close_file(src.src);
               src.open := false;
               if src.resume <> nil then
                  begin
                     src := src.resume;
                     nextch();
                  end
            end
         else
            if ch = #"\n" then
               begin
                  src.line := src.line + 1;
                  src.col := 0;
               end
            else
               src.col := src.col + 1;
      end
   else
      err("Read past end of file", src_location());

load_source(file_name: string) =
   let
      f = open_input(file_name)
      s = source {
         file_name = file_name,
         open = true,
         src = f,
         line = 1,
         col = 0,
         resume = src
      }
   in
      src := s
      nextch()
   end
