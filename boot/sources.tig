type location = {
   file_name: string,
   line: int,
   col: int
}

type source = {
   file_name: string,
   path: string,
   open: bool,
   src: file,
   line: int,
   col: int,
   resume: source
}

type source_list = {
   file_name: string,
   next: source_list
}

src: source = nil
sl: source_list = nil
ch = chr(0)

register_source(file_name: string) =
   let
      new_sl = source_list { file_name = file_name, next = nil }
   in
      if sl = nil then
         sl := new_sl
      else
         let
            current = sl
         in
            while current.next <> nil do
               current := current.next
            current.next := new_sl
         end
   end

source_registered(s: source_list, file_name: string): bool =
   if s = nil then
      false
   else if s.file_name = file_name then
      true
   else
      source_registered(s.next, file_name);

src_location(): location =
   if src = nil then
      nil
   else
      location {
         file_name = src.file_name,
         line = src.line,
         col = src.col
      }

err(msg: string, loc: location) =
   begin
      file_write("Error: ", STD_ERROR)
      if loc <> nil then
         begin
            file_write("in ", STD_ERROR)
            file_write(loc.file_name, STD_ERROR)
            file_write(", line ", STD_ERROR)
            file_write(str(loc.line), STD_ERROR)
            file_write(", column ", STD_ERROR)
            file_write(str(loc.col), STD_ERROR)
            file_write(": ", STD_ERROR)
         end
      file_writeln(msg, STD_ERROR)
      halt(1)
   end

nextch() =
   if src <> nil and src.open then
      begin
         ch := file_getchar(src.src)
         if ch = EOF then
            begin
               close_file(src.src);
               src.open := false;
               if src.resume <> nil then
                  begin
                     src := src.resume;
                     nextch();
                  end
            end
         else
            if ch = #"\n" then
               begin
                  src.line := src.line + 1;
                  src.col := 0;
               end
            else
               src.col := src.col + 1;
      end
   else
      err("Read past end of file", src_location());

load_source(file_name: string) =
   let
      fn = realpath(file_name)
      path = if src = nil then realpath(".") else src.path
   in
      if string_compare(fn, "") = 0 then
         err(string_concat("file not found: ", file_name), src_location())
      if fn <> file_name then
         fn := realpath(string_concat(string_concat(path, "/"), file_name))
      if not(source_registered(sl, fn)) then
         begin
            src := source {
               file_name = fn,
               path = dirname(fn),
               open = true,
               src = open_input(fn),
               line = 1,
               col = 0,
               resume = src
            }
            nextch()
         end
   end

clear_source() =
   src := nil;
