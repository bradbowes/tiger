let
   /***************************/
   /*  getchar implementation */
   buf = read()
   pos = 0

   getchar(): int =
      if pos < length(buf) then begin
         pos := pos + 1
         sub(buf, pos - 1)
      end
      else begin
         buf := read()
         pos := 0
         getchar()
      end
   /***************************/

   type any = { any: bool }
   ch = getchar()

   readint(any: any): int =
      let
         i = 0
         isdigit(ch: int): bool =
            ch >= ord("0") and ch <= ord("9")
      in
         while ch = ord(" ") or ch = ord("\n") do
            ch := getchar()
         any.any := isdigit(ch)
         while isdigit(ch) do begin
            i := i * 10 + ch - ord("0");
            ch := getchar()
         end
         i
      end

   type list = { first: int, rest: list }

   readlist() : list =
      let
         any = any { any = false }
         i = readint(any)
      in
         if any.any then
            list { first = i, rest = readlist() }
         else begin
            ch := getchar()
            nil
         end
      end

   merge(a: list, b: list) : list =
      if a = nil then b
      else if b = nil then a
      else if a.first < b.first then
         list { first = a.first, rest = merge(a.rest, b) }
      else
         list { first = b.first, rest = merge(a, b.rest) }

   printint(i: int) =
      let
         f(i: int) =
            if i > 0 then begin
               f(i / 10);
               write(chr(i - i / 10 * 10 + ord("0")))
            end
      in
         if i < 0 then begin
            write("-")
            f(-1)
         end
         else
            if i > 0 then f(i)
            else write("0")
      end

    printlist(l: list) =
       if l = nil then print("\n")
       else begin
          printint(l.first);
          write(" ");
          printlist(l.rest)
       end
in
   printlist(merge(readlist(), readlist()))
end
