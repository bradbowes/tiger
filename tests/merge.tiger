let
   type any = { any: bool }
   buffer = getchar()

   readint(any: any) : int =
      let
         i = 0
         isdigit(s: string) : bool =
            ord(buffer) >= ord("0") and ord(buffer) <= ord("9")
      in
         while buffer = " " or buffer = "\n" do
            buffer := getchar()
            
         any.any := isdigit(buffer)
         
         while isdigit(buffer) do
            i := i * 10 + ord(buffer) - ord("0");
            buffer := getchar()
         end
         i
      end

   type list = { first: int, rest: list }
   
   readlist() : list =
      let
         any = any { any = false }
         i = readint(any)
      in
         if any.any then
            list { first = i, rest = readlist() }
         else
            begin
               buffer := getchar()
               nil
            end
      end
         
   merge(a: list, b: list) : list =
      if a = nil then b
      else if b = nil then a
      else if a.first < b.first then
         list { first = a.first, rest = merge(a.rest, b) }
      else
         list { first = b.first, rest = merge(a, b.rest) }

   printint(i: int) =
      let
         f(i: int) =
            if i > 0 then begin
               f(i / 10);
               write(chr(i - i / 10 * 10 + ord("0")))
            end
      in
         if i < 0 then begin
            write("-")
            f(-1)
         end else if i > 0 then f(i)
         else write("0")
      end

    printlist(l: list) =
       if l = nil then print("\n")
       else begin
          printint(l.first);
          write(" ");
          printlist(l.rest)
       end
in
   printlist(merge(readlist(), readlist()))
end
