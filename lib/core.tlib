halt(n: int)
str(n: int): string
length(s: string): int
ord(c: char): int
chr(n: int): char
get_stdin_ptr(): file
get_stdout_ptr(): file
get_stderr_ptr(): file
file_getchar(file: file): char
file_putchar(c: char, file: file)
substring(s: string, start: int, length: int): string
string_concat(s1: string, s2: string): string
string_compare(s1: string, s2: string): int
string_buffer(size: int): string
toh(): int
command_argcount(): int
command_arg(i: int): string
open_input(path: string): file
open_output(path: string): file
close_file(f: file)

STD_INPUT = get_stdin_ptr()
STD_OUTPUT = get_stdout_ptr()
STD_ERROR = get_stderr_ptr()
EOF = chr(-1)

getchar(): char =
   file_getchar(STD_INPUT)

putchar(c: char) =
   file_putchar(c, STD_OUTPUT)

write(s: string) =
   for i := 0 to length(s) - 1 do
      putchar(s[i])

writeln(s: string) =
   begin
      write(s)
      putchar(#"\n")
   end

file_write(s: string, f: file) =
   for i := 0 to length(s) - 1 do
      file_putchar(s[i], f)

file_writeln(s: string, f: file) =
   begin
      file_write(s, f)
      file_putchar(#"\n", f)
   end

max(m: int, n: int): int =
   if m < n then n else m

min(m: int, n: int): int =
   if m > n then n else m

is_space(ch: char): bool =
   ch = #" " or (ch >= #"\t" and ch <= #"\r")

is_digit(ch: char): bool =
   ch >= #"0" and ch <= #"9"

is_lower(ch: char): bool =
   ch >= #"a" and ch <= #"z"

is_upper(ch: char): bool =
   ch >= #"A" and ch <= #"Z"

is_alpha(ch: char): bool =
   is_upper(ch) or is_lower(ch)


