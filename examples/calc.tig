(*
   Simple calculator. Supports integer add, subtract,
   multiply and divide with parentheses.
   Shows result after <enter> is pressed.
   Control-D to end session
*)

let
   type tag = quit | num | plus | minus | mul | div
              | lpar | rpar | newline | err
   type token = { op: tag, value: int }

   ch = #" "
   msg = ""

   error(s: string): token =
      begin
         msg := s
         while ch <> #"\n" do
            ch := getchar()
         token { op = err, value = 0 }
      end

   scan(): token =
      let
         digit(): bool =
            ch >= #"0" and ch <= #"9"

         skip() =
            while ch = #" " or ch = #"\t" do
               ch := getchar()

         number(): int =
            let
               n = 0
            in
               while digit() do
                  begin
                     n := n * 10 + ord(ch - #"0")
                     ch := getchar()
                  end
               n
            end
         op = quit
      in
         skip()
         op := case ch of
             #"+"  : plus
           | #"-" : minus
           | #"*" : mul
           | #"/" : div
           | #"(" : lpar
           | #")" : rpar
           | #"\n" : newline
           | EOF : quit
             else if digit() then num else err

         if op = plus or op = minus or
            op = mul or op = div or
            op = lpar or op = rpar then
               let
                  t = token { op = op, value = 0 }
               in
                  ch := getchar()
                  t
               end
         else if op = newline or op = quit then
            token { op = op, value = 0 }
         else if op = num then
            token { op = num, value = number() }
         else
            error("syntax error")
      end

   t = scan()

   factor(): int =
      let
         value = 0
      in
         if t.op = num then
            begin
               value := t.value
               t := scan()
            end
         else if t.op = minus then
            begin
               t := scan()
               value := - factor()
            end
         else if t.op = lpar then
            begin
               t := scan()
               value := sum()
               if t.op = rpar then
                  t := scan()
               else
                  t := error("unclosed parenthesis")
            end

         value
      end

   product(): int =
      let
         value = factor()
      in
         while t.op = mul or t.op = div do
            let
               ismult = t.op = mul

               div(m: int, n: int): int =
                  if n <> 0 then
                     m / n
                  else
                     begin
                        t := error("divide by zero")
                        0
                     end

            in
               t := scan()
               value := if ismult then value * factor() else div(value, factor())
            end

         value
      end

   sum(): int =
      let
         value = product()
      in
         while t.op = plus or t.op = minus do
            let
               isplus = t.op = plus
            in
               t := scan()
               value := if isplus then value + product() else value - product()
            end

         value
      end

   value = sum()
in
   while ch <> EOF do
      begin
         if t.op = err then
            writeln(msg)
         else if t.op = newline then
            begin
               write("= ")
               writeln(str(value))
            end
         else
            writeln("syntax error")
         while ch = #"\n" do
            ch := getchar()
         t := scan()
         value := sum()
      end
end
