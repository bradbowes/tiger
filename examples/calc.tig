/*
   Simple calculator. Supports integer add, subtract,
   multiply and divide with parentheses.
   Shows result after <enter> is pressed.
   Control-D to end session
*/

let
   type token = { op: char, value: int }
   ch = #" "

   quit = chr(-1)
   num = #"0"
   plus = #"+"
   minus = #"-"
   mul = #"*"
   div = #"/"
   lpar = #"("
   rpar = #")"
   newline = #"\n"
   err = #"e"

   msg = ""

   error(s: string): token =
      begin
         msg := s
         while ch <> #"\n" do
            ch := getchar()
         token { op = err, value = 0 }
      end

   scan() : token =
      let
         digit(): bool =
            ch >= #"0" and ch <= #"9"

         skip() =
            while ch = #" " or ch = #"\t" do
               ch := getchar()

         number(): int =
            let
               n = 0
            in
               while digit() do
                  begin
                     n := n * 10 + ord(ch - #"0")
                     ch := getchar()
                  end
               n
            end

         t: token = nil
      in
         skip()
         if ch = plus or ch = minus or
            ch = mul or ch = div or
            ch = lpar or ch = rpar then
               begin
                  t := token { op = ch, value = 0 }
                  ch := getchar()
               end
         else if ch = newline or ch = quit then
            t := token { op = ch, value = 0 }
         else if digit() then
            t := token { op = num, value = number() }
         else t := error("syntax error")

         t
      end

   t = scan()

   factor(): int =
      let
         value = 0
      in
         if t.op = num then
            begin
               value := t.value
               t := scan()
            end
         else if t.op = minus then
            begin
               t := scan()
               value := - factor()
            end
         else if t.op = lpar then
            begin
               t := scan()
               value := sum()
               if t.op = rpar then
                  t := scan()
               else
                  t := error("unclosed parenthesis")
            end

         value
      end

   product(): int =
      let
         value = factor()
      in
         while t.op = mul or t.op = div do
            let
               ismult = t.op = mul

               div(m: int, n: int): int =
                  if n <> 0 then
                     m / n
                  else
                     begin
                        t := error("divide by zero")
                        0
                     end

            in
               t := scan()
               value := if ismult then value * factor() else div(value, factor())
            end

         value
      end

   sum(): int =
      let
         value = product()
      in
         while t.op = plus or t.op = minus do
            let
               isplus = t.op = plus
            in
               t := scan()
               value := if isplus then value + product() else value - product()
            end

         value
      end

   value = sum()
in
   while t.op <> quit do
      begin
         if t.op = err then
            writeln(msg)
         else if t.op = newline then
            begin
               write("= ")
               writeln(str(value))
            end
         else
            writeln("syntax error")
         while ch = newline do
            ch := getchar()
         t := scan()
         value := sum()
      end

   /* consume any extra input */
   while ch <> newline do
      ch := getchar()
end
