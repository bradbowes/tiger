/*
   Using p022names.txt a 46K text file containing over five-thousand
   first names, begin by sorting it into alphabetical order. Then
   working out the alphabetical value for each name, multiply this
   value by its alphabetical position in the list to obtain a name
   score.

   For example, when the list is sorted into alphabetical order,
   COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th
   name in the list. So, COLIN would obtain a score of
   938 Ã— 53 = 49714.

   What is the total of all the name scores in the file?
*/
let
   type node = {item: string, left: node, right: node, height: int}

   tree: node = nil

   max(m: int, n: int): int =
      if m < n then n else m

   height(n: node): int =
      if n = nil then 0 else n.height

   balance(n: node): int =
      if n= nil then 0
      else height(n.left) - height(n.right)

   rotate_left(n: node): node =
      let
         n1 = n.right
         tmp = n1.left
      in
         n1.left := n
         n.right := tmp
         n.height := max(height(n.left), height(n.right)) + 1
         n1.height := max(height(n1.left), height(n1.right)) + 1
         n1
      end

   rotate_right(n: node): node =
      let
         n1 = n.left
         tmp = n1.right
      in
         n1.right := n
         n.left := tmp
         n.height := max(height(n.left), height(n.right)) + 1
         n1.height := max(height(n1.left), height(n1.right)) + 1
         n1
      end

   insert(item: string, n: node): node =
      let
         n1 =
            if n = nil then
               node { item = item, left = nil, right = nil, height = 1 }
            else
               let
                  cmp = string_compare(item, n.item)
               in
                  if cmp < 0 then
                     n.left := insert(item, n.left)
                  else if cmp > 0 then
                     n.right := insert(item, n.right)
                  n
               end
         bal = balance(n1)
      in
         if bal > 1 then
            let
               cmp = string_compare(item, n1.left.item)
            in
               if cmp < 0 then
                  n1 := rotate_right(n1)
               else
                  begin
                     n1.left := rotate_left(n1.left)
                     n1 := rotate_right(n1)
                  end
            end
         else if bal < -1 then
            let
               cmp = string_compare(item, n1.right.item)
            in
               if cmp > 0 then
                  n1 := rotate_left(n1)
               else
                  begin
                     n1.right := rotate_right(n1.right)
                     n1 := rotate_left(n1)
                  end
            end
         n1
      end

   tally(n: node): int =
      let
         pos = 1
         total = 0
         walk(n: node) =
            if n <> nil then
               begin
                  if n.left <> nil then
                     walk(n.left)

                  let
                     score = 0
                     name = n.item
                  in
                     for i := 0 to length(name) - 1 do
                        score := score + ord(name[i]) - ord(#"A") + 1
                     total := total + pos * score
                  end

                  pos := pos + 1

                  if n.right <> nil then
                     walk(n.right)
               end
      in
         walk(tree)
         total
      end

   buf = string_buffer(64)
   f = open_input("p022_names.txt")
   ch = file_getchar(f)
   n = 0
in
   while ch <> EOF do
      begin
         ch := file_getchar(f) /* eat quotation mark */
         n := 0
         while ch <> #"\"" do
            begin
               buf[n] := ch
               n := n + 1
               ch := file_getchar(f)
            end
         tree := insert(substring(buf, 0, n), tree)
         ch := file_getchar(f) /* eat quotation mark */
         if ch <> EOF then
            ch := file_getchar(f) /* eat comma */
      end
      writeln(str(tally(tree)))
end
